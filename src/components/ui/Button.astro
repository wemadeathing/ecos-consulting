---
// Define comprehensive props
export interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'transparent';
  className?: string;
  id?: string;
  type?: 'button' | 'submit' | 'reset';
  [key: string]: any; // Allow any other props
}

const { 
  href, 
  variant = "primary", 
  className = "", 
  id,
  type = "button",
  ...rest 
} = Astro.props as Props;

// Determine if this is a button or a link
const isLink = !!href;
const Element = isLink ? "a" : "button";

// Define variant styles
const variants = {
  primary: "bg-primary-500 text-white hover:bg-primary-700 focus:ring-2 focus:ring-teal-300",
  secondary: "bg-secondary-900 text-white hover:bg-secondary-700 focus:ring-2 focus:ring-white",
  tertiary: "bg-tertiary-500 text-slate-900 hover:bg-tertiary-700 focus:ring-2 focus:ring-lime-300",
  outline: "border secondary-900 text-secondary-900 hover:bg-secondary-900 focus:ring-2 focus:ring-white",
  transparent: "bg-transparent text-white hover:bg-white/10 focus:bg-white/10 focus:outline-none"
};

// Get the appropriate variant style
const variantClass = variants[variant] || variants.primary;

// Determine base class based on usage
let baseClass = "inline-flex items-center justify-center rounded-full px-4 py-2 text-sm font-medium transition-colors";

// Override base class if className contains specific styling needs
if (className.includes("mobile-menu-toggle")) {
  baseClass = "flex items-center justify-center transition-colors focus:outline-none";
}
---

{/*
Button Component:
This component dynamically renders either a `<button>` element or an `<a>` (link) element based on the provided `href` prop.

 - If the `href` prop is provided, an `<a>` tag is rendered to allow navigation.
 - If no `href` is provided, a `<button>` tag is rendered for performing actions and supports the `type` attribute (e.g., 'button', 'submit', or 'reset') to specify its behavior.

 Both types of elements share a similar structure and styling logic, with customization through the `variant`, `className`, and `id` props.
*/}

{isLink ? (
  <a 
    href={href} 
    class:list={[baseClass, variantClass, className]}
    id={id}
    {...rest}
  >
    <slot />
  </a>
) : (
  <button 
    type={type} 
    class:list={[baseClass, variantClass, className]}
    id={id}
    {...rest}
  >
    <slot />
  </button>
)}